@model List<FuNews.Modals.DTOs.Response.Category.CategoryTreeViewModel>
@{
ViewData["Title"] = "Category Management";
}

<div class="container-fluid py-4">
    <div class="card shadow">
        <div class="card-header bg-primary bg-gradient text-white d-flex justify-content-between align-items-center">
            <h4 class="m-0"><i class="bi bi-folder-fill me-2"></i>Category Management</h4>
            <button id="btnCreateRoot" class="btn btn-light">
                <i class="bi bi-plus-circle me-1"></i> Create Root Category
            </button>
        </div>
        <div class="card-body">
            @if (Model != null && Model.Any())
            {
            <div class="category-tree">
                <ul class="tree">
                    @foreach (var category in Model)
                    {
                    @await Html.PartialAsync("CategoryTreeItem", category)
                    }
                </ul>
            </div>
            }
            else
            {
            <div class="text-center py-4 text-muted">
                <i class="bi bi-folder-x fs-1"></i>
                <p class="mt-2">No categories available. Create a new category to get started.</p>
            </div>
            }
        </div>
        <div class="card-footer text-muted">
            <small>Total Root Categories: @(Model?.Count() ?? 0)</small>
        </div>
    </div>
</div>

<!-- Modal rỗng ban đầu, body sẽ được load từ controller -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="categoryModalLabel">
                    <i class="bi bi-folder-plus me-2"></i>Create Category
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Phần này sẽ được thay thế bằng partial view -->
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast notifications container -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert"
         aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle me-2"></i>
                <span id="successToastMessage">Operation completed successfully</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>

    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert"
         aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                <span id="errorToastMessage">An error occurred</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>
</div>

@section Scripts {
<partial name="_ValidationScriptsPartial"/>
<script>
    // Khởi tạo toasts
    var successToast = new bootstrap.Toast(document.getElementById('successToast'), {
        delay: 3000
    });
    var errorToast = new bootstrap.Toast(document.getElementById('errorToast'), {
        delay: 5000
    });

    // Helper function để hiển thị thông báo
    function showToast(type, message) {
        if (type === 'success') {
            document.getElementById('successToastMessage').textContent = message;
            successToast.show();
        } else {
            document.getElementById('errorToastMessage').textContent = message;
            errorToast.show();
        }
    }

    // Xử lý toggle cây danh mục
    $(document).on('click', '.category-toggle', function() {
        $(this).find('i').toggleClass('fa-chevron-down fa-chevron-right');
        $(this).closest('li').children('ul').slideToggle(200);
    });

    // Xử lý sự kiện click vào nút "+" (Add Subcategory)
    $(document).on('click', '.open-create-modal', function() {
        // Lấy giá trị từ data attributes
        var parentId = $(this).data('parentid');
        var parentName = $(this).data('parentname');

        console.log("Opening modal for parent:", parentName, "with ID:", parentId);

        // SỬA: Sử dụng ID categoryModal thay vì createCategoryModal
        var modal = $('#categoryModal');

        // Cập nhật tiêu đề modal
        modal.find('.modal-title').html('<i class="bi bi-folder-plus me-2"></i>Create Subcategory under "' + parentName + '"');

        // Hiển thị loading trong modal
        modal.find('.modal-body').html(`
        <div class="d-flex justify-content-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `);

        // SỬA: Sử dụng Bootstrap 5 syntax để mở modal
        var bsModal = new bootstrap.Modal(modal);
        bsModal.show();

        // Tải form qua AJAX
        $.ajax({
            url: '/Category/OpenCreateModal',
            type: 'GET',
            data: { parentId: parentId },
            success: function(data) {
                // Đặt nội dung form vào modal
                modal.find('.modal-body').html(data);

                // Đảm bảo ParentCategoryId được đặt chính xác
                $('#ParentCategoryId').val(parentId);

                // Khởi tạo lại validation cho form
                $.validator.unobtrusive.parse('#frmCreateCategory');
            },
            error: function(xhr, status, error) {
                // Hiển thị lỗi nếu có
                modal.find('.modal-body').html(`
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-circle me-2"></i>
                    Failed to load form: ${error}
                </div>
            `);
            }
        });
    });

    // Khi nhấn nút "Create Root Category"
    document.getElementById('btnCreateRoot').addEventListener('click', function () {
        loadCreateCategoryModal();
    });

    // Xử lý khi nhấp vào nút "+" (Add Subcategory)
    $(document).on('click', '.btn-add-subcategory', function () {
        var parentId = $(this).data('parentid');
        var parentName = $(this).data('parentname');
        loadCreateCategoryModal(parentId, parentName);
    });

    // Xử lý nút Edit Category
    $(document).on('click', '.btn-edit-category', function () {
        var categoryId = $(this).data('id');
        var categoryName = $(this).data('name');

        // Hiển thị loading trong modal
        document.querySelector('#categoryModal .modal-body').innerHTML = `
                <div class="d-flex justify-content-center py-4">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
            `;
        document.getElementById('categoryModalLabel').innerHTML = '<i class="bi bi-pencil-square me-2"></i>Edit Category: ' + categoryName;

        // Hiển thị modal
        var modalEl = new bootstrap.Modal(document.getElementById('categoryModal'));
        modalEl.show();

        // Load content
        fetch('@Url.Action("GetEditModal", "Category")?id=' + categoryId)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.text();
            })
            .then(html => {
                document.querySelector('#categoryModal .modal-body').innerHTML = html;
                // QUAN TRỌNG: Khởi tạo lại validator sau khi load form
                $.validator.unobtrusive.parse('#categoryModal');
            })
            .catch(error => {
                document.querySelector('#categoryModal .modal-body').innerHTML =
                    `<div class="alert alert-danger">Failed to load form: ${error.message}</div>`;
            });
    });

    // Hàm tải modal tạo category
    function loadCreateCategoryModal(parentId, parentName) {
        // Hiển thị loading trong modal
        document.querySelector('#categoryModal .modal-body').innerHTML = `
                <div class="d-flex justify-content-center py-4">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
            `;

        // Cập nhật title của modal
        if (parentId) {
            document.getElementById('categoryModalLabel').innerHTML =
                '<i class="bi bi-folder-plus me-2"></i>Create Subcategory under "' + parentName + '"';
        } else {
            document.getElementById('categoryModalLabel').innerHTML =
                '<i class="bi bi-folder-plus me-2"></i>Create Root Category';
        }

        // Hiển thị modal
        var modalEl = new bootstrap.Modal(document.getElementById('categoryModal'));
        modalEl.show();

        // Tạo URL với parentId nếu có
        let url = '@Url.Action("OpenCreateModal", "Category")';
        if (parentId) {
            url += '?parentId=' + parentId;
        }

        // Load content
        fetch(url)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.text();
            })
            .then(html => {
                document.querySelector('#categoryModal .modal-body').innerHTML = html;
                // QUAN TRỌNG: Khởi tạo lại validator sau khi load form
                $.validator.unobtrusive.parse('#categoryModal');
            })
            .catch(error => {
                document.querySelector('#categoryModal .modal-body').innerHTML =
                    `<div class="alert alert-danger">Failed to load form: ${error.message}</div>`;
            });
    }

    // Callback function khi create thành công
    function onCreateSuccess(response) {
        if (response.success) {
            var modalEl = document.getElementById('categoryModal');
            var modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();
            showToast('success', 'Category created successfully');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast('error', 'Please check the form for errors');
        }
    }

    function onCreateFailure(xhr, status, error) {
        showToast('error', `Failed to create category: ${error}`);
    }

    // Callback function khi edit thành công
    function onEditSuccess(response) {
        if (response.success) {
            var modalEl = document.getElementById('categoryModal');
            var modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();
            showToast('success', 'Category updated successfully');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast('error', 'Please check the form for errors');
        }
    }

    function onEditFailure(xhr, status, error) {
        showToast('error', `Failed to update category: ${error}`);
    }
</script>

<style>
    .tree {
        list-style: none;
        padding-left: 0;
    }
    .tree li {
        padding: 6px 0;
    }
    .tree ul {
        list-style: none;
        padding-left: 20px;
        border-left: 1px dashed #ccc;
        margin-left: 10px;
    }
    .category-tree .inactive {
        color: #999;
        font-style: italic;
    }
    .category-node {
        display: flex;
        align-items: center;
    }
    .category-toggle {
        cursor: pointer;
        margin-right: 5px;
        width: 16px;
        text-align: center;
    }
    .category-actions {
        margin-left: 10px;
    }
    .category-actions button {
        margin-left: 5px;
        font-size: 14px;
        border: none;
        background: transparent;
        padding: 0;
        cursor: pointer;
    }
    .category-icon {
        margin-right: 8px;
        color: #6c757d;
    }
</style>
}