@model IEnumerable<FUNews.Modals.DTOs.Response.TagResponse>

@{
    ViewData["Title"] = "Tag Management";
}

<div class="container-fluid py-4">
    <div class="card shadow">
        <div class="card-header bg-success bg-gradient text-white d-flex justify-content-between align-items-center">
            <h4 class="m-0"><i class="bi bi-tags-fill me-2"></i>Tag Management</h4>
            <button id="btnShowCreate" class="btn btn-light">
                <i class="bi bi-plus-circle me-1"></i> Add New Tag +
            </button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="tagTable" class="table table-striped table-hover">
                    <thead class="table-light">
                    <tr>
                        <th>Id</th>
                        <th>Tag Name</th>
                        <th>Note</th>
                        <th class="text-center">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var tag in Model)
                        {
                            <tr>
                                <td>@tag.TagId</td>
                                <td>
                                  <span class="badge bg-primary text-white">@tag.TagName</span>
                                </td>
                                <td class="text-muted">@(string.IsNullOrEmpty(tag.Note) ? "-" : tag.Note)</td>
                                <td class="text-center">
                                    <div class="" role="group">
                                        <button class="btn btn-sm btn-info btnEdit" data-id="@tag.TagId">
                                            <i class="bi bi-pencil-square me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger delete-tag" data-tag-id="@tag.TagId"
                                                data-tag-name="@tag.TagName">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center py-4 text-muted">
                                <i class="bi bi-inbox-fill fs-1"></i>
                                <p class="mt-2">No tags available. Create a new tag to get started.</p>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer text-muted">
            <small>Total Tags: @(Model?.Count() ?? 0)</small>
        </div>
    </div>
</div>

<!-- Modal rỗng ban đầu, body sẽ được load từ GetCreateModal -->
<div class="modal fade" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="tagModalLabel">
                    <i class="bi bi-tag me-2"></i>Add New Tag
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Phần này sẽ được thay thế bằng partial view -->
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal xác nhận xóa Tag -->
<div class="modal fade" id="deleteTagModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="bi bi-trash-fill text-danger fs-1"></i>
                </div>
                <p class="text-center">Are you sure you want to delete the tag:</p>
                <h5 class="text-center mb-3">
                    <span id="deleteTagName" class="badge bg-secondary"></span>
                </h5>
                <p class="text-center text-danger small">
                    <i class="bi bi-info-circle me-1"></i>This action cannot be undone.
                </p>
            </div>
            <div class="modal-footer justify-content-center border-0">
                <form id="deleteTagForm" method="POST">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteTagId" name="id"/>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-danger ms-2">
                        <i class="bi bi-trash me-1"></i>Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Toast notifications container -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert"
         aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle me-2"></i>
                <span id="successToastMessage">Operation completed successfully</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>

    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert"
         aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                <span id="errorToastMessage">An error occurred</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
    <script>
        // Khởi tạo toasts
        var successToast = new bootstrap.Toast(document.getElementById('successToast'), {
            delay: 3000
        });
        var errorToast = new bootstrap.Toast(document.getElementById('errorToast'), {
            delay: 5000
        });

        // Helper function để hiển thị thông báo
        function showToast(type, message) {
            if (type === 'success') {
                document.getElementById('successToastMessage').textContent = message;
                successToast.show();
            } else {
                document.getElementById('errorToastMessage').textContent = message;
                errorToast.show();
            }
        }

        // Khi nhấn nút "Create New Tag", gọi lên GetCreateModal bằng AJAX
        document.getElementById('btnShowCreate').addEventListener('click', function () {
            // Hiển thị loading trong modal
            document.querySelector('#tagModal .modal-body').innerHTML = `
          <div class="d-flex justify-content-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        `;
            document.getElementById('tagModalLabel').innerHTML = '<i class="bi bi-plus-circle me-2"></i>Create New Tag';

            // Hiển thị modal
            var modalEl = new bootstrap.Modal(document.getElementById('tagModal'));
            modalEl.show();

            // Load content
            fetch('@Url.Action("OpenCreateModal", "Tag")')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.text();
                })
                .then(html => {
                    document.querySelector('#tagModal .modal-body').innerHTML = html;
                    $.validator.unobtrusive.parse('#tagModal');
                })
                .catch(error => {
                    document.querySelector('#tagModal .modal-body').innerHTML =
                        `<div class="alert alert-danger">Failed to load form: ${error.message}</div>`;
                });
        });

        // Hàm callback khi POST Create thành công
        function onCreateSuccess(response) {
            if (response.success) {
                var modalEl = document.getElementById('tagModal');
                var modal = bootstrap.Modal.getInstance(modalEl);
                modal.hide();
                showToast('success', 'Tag created successfully');
                setTimeout(() => location.reload(), 1000);
            } else {
                // Nếu server trả về PartialView (validation lỗi), nội dung modal đã được thay thế
                showToast('error', 'Please check the form for errors');
            }
        }

        function onCreateFailure(xhr, status, error) {
            showToast('error', `An error occurred: ${error}`);
        }

        // --- Hàm bật modal Edit ---
        document.querySelectorAll('.btnEdit').forEach(function (btn) {
            btn.addEventListener('click', function () {
                var tagId = this.getAttribute('data-id');

                // Hiển thị loading trong modal
                document.querySelector('#tagModal .modal-body').innerHTML = `
            <div class="d-flex justify-content-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          `;
                document.getElementById('tagModalLabel').innerHTML = '<i class="bi bi-pencil-square me-2"></i>Edit Tag #' + tagId;

                // Hiển thị modal
                var modal = new bootstrap.Modal(document.getElementById('tagModal'))
                modal.show();

                // Load content
                fetch('@Url.Action("GetEditModal", "Tag")?id=' + tagId)
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.text();
                    })
                    .then(html => {
                        document.querySelector('#tagModal .modal-body').innerHTML = html;
                        $.validator.unobtrusive.parse('#tagModal');
                    })
                    .catch(error => {
                        document.querySelector('#tagModal .modal-body').innerHTML =
                            `<div class="alert alert-danger">Failed to load form: ${error.message}</div>`;
                    });
            });
        });

        // --- Callback khi Edit POST thành công ---
        function onEditSuccess(response) {
            if (response.success) {
                var modalEl = document.getElementById('tagModal');
                var modal = bootstrap.Modal.getInstance(modalEl);
                modal.hide();
                showToast('success', 'Tag updated successfully');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('error', 'Please check the form for errors');
            }
        }

        function onEditFailure(xhr, status, error) {
            showToast('error', `An error occurred: ${error}`);
        }

        // Xử lý hiển thị modal xác nhận xóa
        $(document).on('click', '.delete-tag', function () {
            var tagId = $(this).data('tag-id');
            var tagName = $(this).data('tag-name');

            $('#deleteTagId').val(tagId);
            $('#deleteTagName').text(tagName);

            $('#deleteTagModal').modal('show');
        });

        // Xử lý khi người dùng xác nhận xóa
        $('#deleteTagForm').submit(function (e) {
            e.preventDefault();

            var tagId = $('#deleteTagId').val();
            var tagName = $('#deleteTagName').text();
            var submitBtn = $(this).find('button[type="submit"]');
            var originalBtnHtml = submitBtn.html();

            // Disable button and show loading
            submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...');

            // Gửi AJAX request để xóa Tag
            $.ajax({
                url: '/Tag/Delete/' + tagId,
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    $('#deleteTagModal').modal('hide');

                    if (response.success) {
                        // Animation xóa dòng
                        $('button.delete-tag[data-tag-id="' + tagId + '"]')
                            .closest('tr')
                            .addClass('table-danger')
                            .fadeOut(400, function () {
                                $(this).remove();

                                // Kiểm tra nếu không còn tag nào
                                if ($('#tagTable tbody tr').length === 0) {
                                    $('#tagTable tbody').append(`
                      <tr>
                        <td colspan="4" class="text-center py-4 text-muted">
                          <i class="bi bi-inbox-fill fs-1"></i>
                          <p class="mt-2">No tags available. Create a new tag to get started.</p>
                        </td>
                      </tr>
                    `);
                                }
                            });

                        showToast('success', `Tag "${tagName}" deleted successfully`);
                    } else {
                        showToast('error', response.message || 'Failed to delete tag');
                    }

                    // Reset button state
                    submitBtn.prop('disabled', false).html(originalBtnHtml);
                },
                error: function (xhr) {
                    $('#deleteTagModal').modal('hide');
                    showToast('error', 'An error occurred while deleting the tag');

                    // Reset button state
                    submitBtn.prop('disabled', false).html(originalBtnHtml);
                }
            });
        });
    </script>
}